requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "kye4vBzDx8HfWlV1zlprpyRyH "
consumerSecret <- "ppeQNaUW1yiaF2WJP4paiv8oyzmWbv5dIruWdtLab2Vvm60fVE"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
library(streamR)
filterStream("tweets.json", track = c("Obama", "Biden"), timeout = 120,
oauth = my_oauth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "kye4vBzDx8HfWlV1zlprpyRyH "
consumerSecret <- "ppeQNaUW1yiaF2WJP4paiv8oyzmWbv5dIruWdtLab2Vvm60fVE"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
?OAuthFactory$new
?OAuthFactory
OAuthFactory
my_oauth
?handshake
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "kye4vBzDx8HfWlV1zlprpyRyH "
consumerSecret <- "ppeQNaUW1yiaF2WJP4paiv8oyzmWbv5dIruWdtLab2Vvm60fVE"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
accessToken <- '3240115562-T8dGYiz6gPTWpGLCOVBWxoUxbhnFtLh2m0rmfFJ'
accessTokenSecret <- 'OZmG61SyX79hXZ9QMhDNdyn6y0T22fl0TeKNFt4lORxcM'
my_oauth <- createOAUthToken(consumerKey, consumerSecret, accessToken, accessTokenSecret)
?createOAUthToken
??createOAUthToken
library(twitteR)
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
library(ROAuth)
my_oauth <- createOAUthToken(consumerKey, consumerSecret, accessToken, accessTokenSecret)
library(roxygen2 )
library(roxygen2)
my_oauth <- createOAUthToken(consumerKey, consumerSecret, accessToken, accessTokenSecret)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
accessToken <- "3240115562-T8dGYiz6gPTWpGLCOVBWxoUxbhnFtLh2m0rmfFJ"
accessTokenSecret <- "OZmG61SyX79hXZ9QMhDNdyn6y0T22fl0TeKNFt4lORxcM"
my_oauth <- createOAUthToken(consumerKey, consumerSecret, accessToken, accessTokenSecret)
?RCurlOptions
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
my_oauth
?OAuthFactory
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL,
needsVerifier=FALSE)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
accessToken <- "3240115562-T8dGYiz6gPTWpGLCOVBWxoUxbhnFtLh2m0rmfFJ"
accessTokenSecret <- "OZmG61SyX79hXZ9QMhDNdyn6y0T22fl0TeKNFt4lORxcM"
my_oauth <- createOAUthToken(consumerKey, consumerSecret, accessToken, accessTokenSecret)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "kye4vBzDx8HfWlV1zlprpyRyH"
consumerSecret <- "ppeQNaUW1yiaF2WJP4paiv8oyzmWbv5dIruWdtLab2Vvm60fVE"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL,
needsVerifier=FALSE)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "kye4vBzDx8HfWlV1zlprpyRyH"
consumerSecret <- "ppeQNaUW1yiaF2WJP4paiv8oyzmWbv5dIruWdtLab2Vvm60fVE"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
setwd("~/credentials/")
setwd("./credentials/")
save(my_oauth, file="my_oauth")
library(smappR)
?userStream
load("my_oauth.Rdata")
load("./my_oauth.Rdata")
setwd("../")
source('~/.active-rstudio-document', echo=TRUE)
load("./credentials/my_oauth.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
file.remove("geo.json")
filterStream("geo.json", follow="2749390125", timeout = 1800,
oauth = my_oauth)
geo.df <- parseTweets("geo.json")
sum(!is.na(geo.df$lat))
View(geo.df)
file.remove("geo.json")
library(streamR)
library(Rfacebook)
library(smappR)
library(ROAuth)
library(ggplot2)
library(RCurl)
library(httr)
library(twitteR)
library(grid)
library(maps)
library(dplyr)
library(tidyr)
load(paste0("./final_data.rda"))
if (sum(duplicated(final_data))>0) final_data=final_data[!duplicated(final_data),]
nrow(final_data)
sum(!is.na(final_data$place_lat))
final_data=final_data[!is.na(final_data$place_lat),]
final_data=final_data[!is.na(final_data$place_lon),]
final_data=tbl_df(final_data)
final_data %>% summarise(Min_Longitude=min(place_lat),Max_Longitude=max(place_lat),
SD_Longitude=sd(place_lat))
final_data %>% summarise(Min_Longitude=min(place_lon),Max_Longitude=max(place_lon),
SD_Longitude=sd(place_lon))
map.data <- map_data(map="world")
points <- data.frame(x = as.numeric(final_data$place_lon), y = as.numeric(final_data$place_lat))
ggplot(map.data) +
geom_map(aes(map_id = region), map = map.data, fill = "white",color = "grey20", size = 0.25) +
geom_point(data = points,aes(x = x, y = y), size = 7, alpha = 1/5, color = "darkblue") +
ggtitle("Locations of Taylor Swift's Tweets")+xlab("Longitude")+ylab("Latitude")
g=ggplot(map.data) +
geom_map(aes(map_id = region), map = map.data, fill = "white",color = "grey20", size = 0.25) +
geom_point(data = points,aes(x = x, y = y), size = 7, alpha = 1/5, color = "darkblue") +
ggtitle("Locations of Taylor Swift's Tweets")+xlab("Longitude")+ylab("Latitude")
ggplotly(g)
library(ggplotly)
install.packages(ggplotly)
install.packages(plotly)
library(plotly)
devtools::install_github("ropensci/plotly")
devtools::install_github("ropensci/plotly")
library(plotly)
g
Sys.setenv("plotly_username"="UsernameJeffreyUslan")
Sys.setenv("plotly_api_key"="4txr51h2pd")
library(plotly)
ggplotly(g)
Sys.setenv("plotly_username"="JeffreyUslan")
ggplotly(g)
library(streamR)
library(Rfacebook)
library(smappR)
library(ROAuth)
library(ggplot2)
library(RCurl)
library(httr)
library(twitteR)
library(grid)
library(maps)
library(dplyr)
library(tidyr)
#Loading credentials necessary to interact with the twitter API
load("./credentials/my_oauth.Rdata")
load("./world_tweets.rda")
geo_table=as.data.frame(table(tweets.df$user_id_str))
geo_table <- geo_table[order(-geo_table$Freq),]
head(geo_table)
high_id=as.character(geo_table$Var1[1])
tweets.df$screen_name[tweets.df$user_id_str==high_id][1]
final_data=tweets.df[which(tweets.df$user_id_str==high_id),]
if (sum(duplicated(final_data))>0) final_data=final_data[!duplicated(final_data),]
nrow(final_data)
sum(!is.na(final_data$place_lat))
final_data=final_data[!is.na(final_data$place_lat),]
final_data=final_data[!is.na(final_data$place_lon),]
final_data=tbl_df(final_data)
final_data %>% summarise(Min_Longitude=min(place_lat),Max_Longitude=max(place_lat),
SD_Longitude=sd(place_lat))
final_data %>% summarise(Min_Longitude=min(place_lon),Max_Longitude=max(place_lon),
SD_Longitude=sd(place_lon))
geo_table=tbl_df(geo_table)
geo_table
geo_table=tbl_df(geo_table)
load("./world_tweets.rda")
geo_table=tbl_df(geo_table)
geo_table
load("./world_tweets.rda")
geo_table=tbl_df(geo_table)
geo_table
tweets.df=tbl_df(tweets.df)
tweets.df
tweets.df %>% group_by(user_id_str) %>% summarise(Min_Longitude=min(place_lat),Max_Longitude=max(place_lat),
SD_Longitude=sd(place_lat))
tweets.df %>% group_by(user_id_str) %>%
summarise(Count=n(),
Min_Longitude=min(place_lat),Max_Longitude=max(place_lat),
SD_Longitude=sd(place_lat)) %>% arrange(desc(Count))
tweets.df %>% group_by(user_id_str) %>%
summarise(Count=n()) %>% arrange(desc(Count))
summarise(Count=n(),
tweets.df %>% group_by(user_id_str) %>%
summarise(Count=n(),
SD_Longitude=sd(place_lon)) %>% arrange(desc(SD_Longitude))
this=tweets.df %>% group_by(user_id_str) %>%
summarise(Count=n(),
SD_Longitude=sd(place_lon)) %>% arrange(desc(SD_Longitude))
View(this)
install.packages("pander")
?pander
library(pander)
?pander
load(paste0("./final_data.rda"))
final_data=final_data[!is.na(final_data$place_lat),]
final_data=final_data[!is.na(final_data$place_lon),]
final_data=tbl_df(final_data)
this=final_data %>% summarise(Min_Latitude=round(min(place_lat),1),
Max_Latitude=round(max(place_lat),1),
SD_Latitude=round(sd(place_lat),1))
library(streamR)
library(Rfacebook)
library(smappR)
library(ROAuth)
library(ggplot2)
library(RCurl)
library(httr)
library(twitteR)
library(grid)
library(maps)
library(dplyr)
library(tidyr)
library(pander)
final_data %>% summarise(Min_Latitude=round(min(place_lat),1),
Max_Latitude=round(max(place_lat),1),
SD_Latitude=round(sd(place_lat),1))
final_data
this=final_data
this
this=final_data %>% summarise(Min_Latitude=round(min(place_lat),1),
Max_Latitude=round(max(place_lat),1),
SD_Latitude=round(sd(place_lat),1))
this
this
str(this)
str(data.frame(this))
this
names(this)
class(this)
potential_users=c("katyperry","justinbieber","taylorswift13")
user_ids=c("21447363","27260086","17919972")
potential_user.df=data.frame(potential_users,user_ids)
pander(potential_user.df)
pander(this)
class(potential_user.df)
class(this)
str(potential_user)
str(this)
str(potential_user.df)
knitr(this)
library(knitr)
knitr(this)
kable(this)
grids_x=10
lon_min=floor(min(final_data$place_lon))
lon_max=ceiling(max(final_data$place_lon))
grid_lon=seq(lon_min,lon_max,((lon_max-lon_min)/grids_x))
lat_min=floor(min(final_data$place_lat))
lat_max=ceiling(max(final_data$place_lat))
grid_lat=seq(lat_min,lat_max,((lat_max-lat_min)/grids_x))
final_data$lon_grid=NA
final_data$lat_grid=NA
for (i in 2:(grids_x+1)){
lon_ind=which(final_data$place_lon<=grid_lon[i] & final_data$place_lon>=grid_lon[i-1])
final_data$lon_grid[lon_ind]=(i-1)
lat_ind=which(final_data$place_lat<=grid_lat[i] & final_data$place_lat>=grid_lat[i-1])
final_data$lat_grid[lat_ind]=(i-1)
}
final_data$grid=paste(final_data$lat_grid,final_data$lon_grid)
this2=as.data.frame(final_data %>% group_by(grid) %>% summarise(Count=n(),
Probability=round(n()/nrow(final_data),2),
Longitude_Mean=round(mean(place_lon),1),
Latitude_Mean=round(mean(place_lat)),1) %>%
arrange(desc(Probability)))
this2
kable(this2)
final_data %>% group_by(Grid) %>% summarise(Count=n(),
Probability=round(n()/nrow(final_data),2),
Longitude_Mean=round(mean(place_lon),1),
Latitude_Mean=round(mean(place_lat)),1) %>%
arrange(desc(Probability))
final_data$Grid=paste(final_data$lat_grid,final_data$lon_grid)
final_data %>% group_by(Grid) %>% summarise(Count=n(),
Probability=round(n()/nrow(final_data),2),
Longitude_Mean=round(mean(place_lon),1),
Latitude_Mean=round(mean(place_lat)),1) %>%
arrange(desc(Probability)))
this2=(final_data %>% group_by(Grid) %>% summarise(Count=n(),
Probability=round(n()/nrow(final_data),2),
Longitude_Mean=round(mean(place_lon),1),
Latitude_Mean=round(mean(place_lat)),1) %>%
arrange(desc(Probability)))
this2
final_data %>% group_by(Grid) %>% summarise(Count=n(),
Probability=round(n()/nrow(final_data),2),
Longitude_Mean=round(mean(place_lon),1),
Latitude_Mean=round(mean(place_lat)),1) %>% arrange(desc(Probability))
grids_x=10
lon_min=floor(min(final_data$place_lon))
lon_max=ceiling(max(final_data$place_lon))
grid_lon=seq(lon_min,lon_max,((lon_max-lon_min)/grids_x))
lat_min=floor(min(final_data$place_lat))
lat_max=ceiling(max(final_data$place_lat))
grid_lat=seq(lat_min,lat_max,((lat_max-lat_min)/grids_x))
final_data$lon_grid=NA
final_data$lat_grid=NA
for (i in 2:(grids_x+1)){
lon_ind=which(final_data$place_lon<=grid_lon[i] & final_data$place_lon>=grid_lon[i-1])
final_data$lon_grid[lon_ind]=(i-1)
lat_ind=which(final_data$place_lat<=grid_lat[i] & final_data$place_lat>=grid_lat[i-1])
final_data$lat_grid[lat_ind]=(i-1)
}
final_data$Grid=paste(final_data$lat_grid,final_data$lon_grid)
load(paste0("./final_data.rda"))
final_data=final_data[!is.na(final_data$place_lat),]
final_data=final_data[!is.na(final_data$place_lon),]
grids_x=10
lon_min=floor(min(final_data$place_lon))
lon_max=ceiling(max(final_data$place_lon))
grid_lon=seq(lon_min,lon_max,((lon_max-lon_min)/grids_x))
lat_min=floor(min(final_data$place_lat))
lat_max=ceiling(max(final_data$place_lat))
grid_lat=seq(lat_min,lat_max,((lat_max-lat_min)/grids_x))
final_data$lon_grid=NA
final_data$lat_grid=NA
for (i in 2:(grids_x+1)){
lon_ind=which(final_data$place_lon<=grid_lon[i] & final_data$place_lon>=grid_lon[i-1])
final_data$lon_grid[lon_ind]=(i-1)
lat_ind=which(final_data$place_lat<=grid_lat[i] & final_data$place_lat>=grid_lat[i-1])
final_data$lat_grid[lat_ind]=(i-1)
}
final_data$Grid=paste(final_data$lat_grid,final_data$lon_grid)
this2=(final_data %>% group_by(Grid) %>% summarise(Count=n(),
Probability=round(n()/nrow(final_data),2),
Longitude_Mean=round(mean(place_lon),1),
Latitude_Mean=round(mean(place_lat)),1) %>% arrange(desc(Probability)))
this2
pander(this2)
this2
this2=(final_data %>% group_by(Grid) %>% summarise(Count=n(),
Probability=round(n()/nrow(final_data),2),
Longitude_Mean=round(mean(place_lon),1),
Latitude_Mean=round(mean(place_lat)),1) %>% arrange(desc(Probability)))
this2
pander(this2)
library(streamR)
library(Rfacebook)
library(smappR)
library(ROAuth)
library(ggplot2)
library(RCurl)
library(httr)
library(twitteR)
library(grid)
library(maps)
library(dplyr)
library(tidyr)
#Loading credentials necessary to interact with the twitter API
load("./credentials/my_oauth.Rdata")
#Top 3 non-political twitter users to be potentially used in analysis
potential_users=c("katyperry","justinbieber","taylorswift13")
user_ids=c("21447363","27260086","17919972")
potential_user.df=data.frame(potential_users,user_ids)
#Pull 5 minutes of tweets for sampling
for (i in 1:nrow(potential_user.df)){
user=as.character(potential_user.df$potential_users[i])
user_id=as.character(potential_user.df$user_ids[i])
tweets2.df=data.frame()
minutes=20
for (i in 1:minutes){
try(file.remove("tweets2.json"))
filterStream("tweets2.json", timeout = 60, follow=c(user_id),
oauth = my_oauth)
tmp<-try(parseTweets("tweets2.json", verbose  = FALSE))
if (class(tmp) != "try-error") tweets2.df <- rbind(tweets2.df,tmp)
if (sum(duplicated(tweets2.df))>0) tweets2.df=tweets2.df[!duplicated(tweets2.df),]
}
save(tweets2.df, file=paste0("./",user,"12.rda"))
}
#Collect information on tweets gathered
tweet_tot_n=NULL
tweet_geo_n=NULL
tweet_geo_lat_sd=NULL
tweet_geo_lon_sd=NULL
for (i in 1:nrow(potential_user.df)){
user=as.character(potential_user.df$potential_users[i])
user_id=as.character(potential_user.df$user_ids[i])
load(paste0("./",user,"12.rda"))
tweet_tot_n=c(tweet_tot_n,nrow(tweets2.df))
tweet_geo_n=c(tweet_geo_n,sum(!is.na(tweets2.df$place_lat)))
tweet_geo_lat_sd=c(tweet_geo_lat_sd,sd(tweets2.df$place_lat,na.rm=TRUE))
tweet_geo_lon_sd=c(tweet_geo_lon_sd,sd(tweets2.df$place_lon,na.rm=TRUE))
}
potential_user.df=data.frame(potential_user.df,
Total_sample=tweet_tot_n,
Geo_tagged_count=tweet_geo_n,
Geo_lat_sd=tweet_geo_lat_sd,
Geo_lon_sd=tweet_geo_lon_sd)
potential_user.df
#Pull 5 minutes of tweets for sampling
for (i in 1:nrow(potential_user.df)){
#   user=as.character(potential_user.df$potential_users[i])
#   user_id=as.character(potential_user.df$user_ids[i])
#
#   tweets2.df=data.frame()
#
#   minutes=20
#   for (i in 1:minutes){
#     try(file.remove("tweets2.json"))
#     filterStream("tweets2.json", timeout = 60, follow=c(user_id),
#                  oauth = my_oauth)
#     tmp<-try(parseTweets("tweets2.json", verbose  = FALSE))
#     if (class(tmp) != "try-error") tweets2.df <- rbind(tweets2.df,tmp)
#     if (sum(duplicated(tweets2.df))>0) tweets2.df=tweets2.df[!duplicated(tweets2.df),]
#   }
save(tweets2.df, file=paste0("./",user,"2.rda"))
}
tweet_tot_n=NULL
tweet_geo_n=NULL
tweet_geo_lat_sd=NULL
tweet_geo_lon_sd=NULL
for (i in 1:nrow(potential_user.df)){
user=as.character(potential_user.df$potential_users[i])
user_id=as.character(potential_user.df$user_ids[i])
load(paste0("./",user,"2.rda"))
tweet_tot_n=c(tweet_tot_n,nrow(tweets2.df))
tweet_geo_n=c(tweet_geo_n,sum(!is.na(tweets2.df$place_lat)))
tweet_geo_lat_sd=c(tweet_geo_lat_sd,sd(tweets2.df$place_lat,na.rm=TRUE))
tweet_geo_lon_sd=c(tweet_geo_lon_sd,sd(tweets2.df$place_lon,na.rm=TRUE))
}
potential_user.df=data.frame(potential_user.df,
Total_sample=tweet_tot_n,
Geo_tagged_count=tweet_geo_n,
Geo_lat_sd=tweet_geo_lat_sd,
Geo_lon_sd=tweet_geo_lon_sd)
user="taylorswift13"
user_id="17919972"
load(paste0("./",user,"3.rda"))
load(paste0("./",user,"2.rda"))
final_data=rbind(tweets2.df,tweets3.df)
if (sum(duplicated(final_data))>0) final_data=final_data[!duplicated(final_data),]
nrow(final_data)
sum(!is.na(final_data$place_lat))
final_data=final_data[!is.na(final_data$place_lat),]
final_data=final_data[!is.na(final_data$place_lon),]
load(paste0("./",user,"2.rda"))
load(paste0("./final_data.rda"))
load(paste0("./",user,"3.rda"))
sum(!is.na(final_data$place_lat))
final_data=rbind(tweets2.df,final_data.df)
final_data=rbind(tweets2.df,final_data)
if (sum(duplicated(final_data))>0) final_data=final_data[!duplicated(final_data),]
nrow(final_data)
sum(!is.na(final_data$place_lat))
save(final_data, file=paste0("./final_data.rda"))
user="taylorswift13"
user_id="17919972"
#Gathering 60 minutes worth of tweets
tweets3.df=data.frame()
minutes=180
for (i in 1:minutes){
try(file.remove("tweets3.json"))
filterStream("tweets3.json", timeout = 60, follow=c(user_id),
oauth = my_oauth)
tmp<-try(parseTweets("tweets3.json", verbose  = FALSE))
if (class(tmp) != "try-error") tweets3.df <- rbind(tweets3.df,tmp)
if (sum(duplicated(tweets3.df))>0) tweets3.df=tweets3.df[!duplicated(tweets3.df),]
}
library(streamR)
library(Rfacebook)
library(smappR)
library(ROAuth)
library(ggplot2)
library(RCurl)
library(httr)
library(twitteR)
library(grid)
library(maps)
library(dplyr)
library(tidyr)
load("./credentials/my_oauth.Rdata")
load("./world_tweets.rda")
tweets.df=tbl_df(tweets.df)
tweets.df %>% group_by(user_id_str) %>%   summarise(Count=n()) %>% arrange(desc(Count))
this=tweets.df %>% group_by(user_id_str) %>%
summarise(Count=n(),
SD_Longitude=sd(place_lon)) %>% arrange(desc(SD_Longitude))
View(this)
hist(this$Count
)
this %>% arrange(desc(SD_Longitude))
this %>% arrange(desc(Count))
(this %>% arrange(desc(Count)))[1:30]
(this %>% arrange(desc(Count)))[1:30,]
(this %>% arrange(desc(Count)))[1:20,]
